import logging
from typing import Any, List, Mapping, Optional

from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
import zhipuai

logger = logging.getLogger(__name__)


class CustomChatGLM(LLM):
    model_kwargs: Optional[dict] = None
    """Keyword arguments to pass to the model."""
    temperature: float = 0.1
    """LLM model temperature from 0 to 1."""
    top_p: float = 0.1
    """Top P for nucleus sampling from 0 to 1"""
    model: str = "chatglm_std"
    """chatglm online model"""

    @property
    def _llm_type(self) -> str:
        return "chat_glm"

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"model_kwargs": _model_kwargs},
        }

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call out to a ChatGLM LLM inference endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = chatglm_llm("Who are you?")
        """

        _model_kwargs = self.model_kwargs or {}

        payload = {
            "model": self.model,
            "prompt": [{"role": "user", "content": prompt }],
            "top_p":  self.top_p,
            "temperature": self.temperature,
        }
        payload.update(_model_kwargs)
        payload.update(kwargs)

        logger.debug(f"ChatGLM payload: {payload}")

        # call api
        try:
            # 发送请求
            response = zhipuai.model_api.invoke(
                **payload
            )
        except Exception as e:
            raise ValueError(f"Error raised by inference endpoint: {e}")

        logger.debug(f"ChatGLM response: {response}")
        if response["code"] != 200:
            raise ValueError(response["msg"])

        text = response['data']['choices'][0]['content']
        if text.startswith('"'):
            text = text[1:]
        if text.endswith('"'):
            text = text[:-1]
        text = text.replace("\\n", "\n")

        if stop is not None:
            text = enforce_stop_tokens(text, stop)

        return text.strip()
